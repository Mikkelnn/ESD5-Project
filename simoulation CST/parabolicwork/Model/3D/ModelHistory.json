{
    "general": {
        "version": "2024.0",
        "date": "2023-09-01",
        "acis": "33.0.1",
        "buildnumber": "20230901",
        "project_type": "MWS",
        "length": "cm",
        "frequency": {
            "unit": "GHz",
            "minimum": "9",
            "maximum": "10",
            "minimum_expr": "9",
            "maximum_expr": "10"
        },
        "time": "ns",
        "created": "2024.0|33.0.1|20230901"
    },
    "history": [
        {
            "caption": "use template: Antenna - Reflector_1.cfg",
            "version": "2024.0|33.0.1|20230901",
            "hidden": false,
            "type": "vba",
            "code": [
                "'set the units",
                "With Units",
                "    .SetUnit \"Length\", \"cm\"",
                "    .SetUnit \"Frequency\", \"GHz\"",
                "    .SetUnit \"Voltage\", \"V\"",
                "    .SetUnit \"Resistance\", \"Ohm\"",
                "    .SetUnit \"Inductance\", \"nH\"",
                "    .SetUnit \"Temperature\",  \"degC\"",
                "    .SetUnit \"Time\", \"ns\"",
                "    .SetUnit \"Current\", \"A\"",
                "    .SetUnit \"Conductance\", \"S\"",
                "    .SetUnit \"Capacitance\", \"pF\"",
                "End With",
                "",
                "ThermalSolver.AmbientTemperature \"0\"",
                "",
                "'----------------------------------------------------------------------------",
                "",
                "'set the frequency range",
                "Solver.FrequencyRange \"9\", \"10\"",
                "",
                "'----------------------------------------------------------------------------",
                "",
                "Plot.DrawBox True",
                "",
                "With Background",
                "     .Type \"Normal\"",
                "     .Epsilon \"1.0\"",
                "     .Mu \"1.0\"",
                "     .XminSpace \"0.0\"",
                "     .XmaxSpace \"0.0\"",
                "     .YminSpace \"0.0\"",
                "     .YmaxSpace \"0.0\"",
                "     .ZminSpace \"0.0\"",
                "     .ZmaxSpace \"0.0\"",
                "End With",
                "",
                "With Boundary",
                "     .Xmin \"expanded open\"",
                "     .Xmax \"expanded open\"",
                "     .Ymin \"expanded open\"",
                "     .Ymax \"expanded open\"",
                "     .Zmin \"expanded open\"",
                "     .Zmax \"expanded open\"",
                "     .Xsymmetry \"none\"",
                "     .Ysymmetry \"none\"",
                "     .Zsymmetry \"none\"",
                "End With",
                "",
                "' switch on FD-TET setting for accurate farfields",
                "",
                "FDSolver.ExtrudeOpenBC \"True\"",
                "",
                "Mesh.FPBAAvoidNonRegUnite \"True\"",
                "Mesh.ConsiderSpaceForLowerMeshLimit \"False\"",
                "Mesh.MinimumStepNumber \"5\"",
                "",
                "With MeshSettings",
                "     .SetMeshType \"Hex\"",
                "     .Set \"RatioLimitGeometry\", \"20\"",
                "End With",
                "",
                "With MeshSettings",
                "     .SetMeshType \"HexTLM\"",
                "     .Set \"RatioLimitGeometry\", \"20\"",
                "End With",
                "",
                "PostProcess1D.ActivateOperation \"vswr\", \"true\"",
                "PostProcess1D.ActivateOperation \"yz-matrices\", \"true\"",
                "",
                "With FarfieldPlot",
                "\t.ClearCuts ' lateral=phi, polar=theta",
                "\t.AddCut \"lateral\", \"0\", \"1\"",
                "\t.AddCut \"lateral\", \"90\", \"1\"",
                "\t.AddCut \"polar\", \"90\", \"1\"",
                "End With",
                "",
                "'----------------------------------------------------------------------------",
                "",
                "Dim sDefineAt As String",
                "sDefineAt = \"10\"",
                "Dim sDefineAtName As String",
                "sDefineAtName = \"10\"",
                "Dim sDefineAtToken As String",
                "sDefineAtToken = \"f=\"",
                "Dim aFreq() As String",
                "aFreq = Split(sDefineAt, \";\")",
                "Dim aNames() As String",
                "aNames = Split(sDefineAtName, \";\")",
                "",
                "Dim nIndex As Integer",
                "For nIndex = LBound(aFreq) To UBound(aFreq)",
                "",
                "Dim zz_val As String",
                "zz_val = aFreq (nIndex)",
                "Dim zz_name As String",
                "zz_name = sDefineAtToken & aNames (nIndex)",
                "",
                "' Define E-Field Monitors",
                "With Monitor",
                "    .Reset",
                "    .Name \"e-field (\"& zz_name &\")\"",
                "    .Dimension \"Volume\"",
                "    .Domain \"Frequency\"",
                "    .FieldType \"Efield\"",
                "    .MonitorValue  zz_val",
                "    .Create",
                "End With",
                "",
                "' Define Farfield Monitors",
                "With Monitor",
                "    .Reset",
                "    .Name \"farfield (\"& zz_name &\")\"",
                "    .Domain \"Frequency\"",
                "    .FieldType \"Farfield\"",
                "    .MonitorValue  zz_val",
                "    .ExportFarfieldSource \"False\"",
                "    .Create",
                "End With",
                "",
                "Next",
                "",
                "'----------------------------------------------------------------------------",
                "",
                "With MeshSettings",
                "     .SetMeshType \"Srf\"",
                "     .Set \"Version\", 1%",
                "End With",
                "",
                "With Mesh",
                "     .MeshType \"Surface\"",
                "End With",
                "",
                "'set the solver type",
                "ChangeSolverType(\"HF IntegralEq\")",
                "",
                "'----------------------------------------------------------------------------"
            ]
        },
        {
            "caption": "execute macro: Construct\\Parts\\Reflector dish",
            "version": "2024.0|33.0.1|20230901",
            "hidden": false,
            "type": "vba",
            "code": [
                "Dim cst_D As Double, cst_focus As Double, cst_th_true As Boolean, cst_th_dish As Double",
                "\tDim scst_D As Double, scst_th_true As Boolean, scst_th_dish As Double",
                "\tDim cst_result As Integer",
                "\tDim scst_focus As String",
                "",
                "cst_result = -1%",
                "",
                "\tIf (cst_result =0) Then Exit All   ' if cancel/help is clicked, exit all",
                "",
                "\t'  define curve circle: Dummy:circle1",
                "\tDim sCurveName1 As String",
                "",
                "\tOn Error GoTo Curve_Exists1",
                "\t\tCurve.NewCurve \"Dummy\"",
                "\tCurve_Exists1:",
                "\tOn Error GoTo 0",
                "",
                "\t'check to generate a fresh dummy curve!",
                "sCurveName1 = \"circle_1\"",
                "",
                "",
                "\t'  define curve circle: Dummy:circle1",
                "\tWith Circle",
                "\t     .Reset",
                "\t     .Name sCurveName1",
                "\t     .Curve \"Dummy\"",
                "\t     .Radius \"D/2\"",
                "\t     .Xcenter \"0.0\"",
                "\t     .Ycenter \"0.0\"",
                "\t     .Segments \"0\"",
                "\t     .Create",
                "\tEnd With",
                "",
                "",
                "\t'  transform curve: translate Dummy:circle1",
                "\tWith Transform",
                "\t     .Reset",
                "\t     .Name \"Dummy:circle_1\"",
                "\t     .Vector \"0\", \"0\", \"(D^2)/(16*focus)+th_true-th_true\"",
                "\t     .UsePickedPoints \"False\"",
                "\t     .InvertPickedPoints \"False\"",
                "\t     .MultipleObjects \"False\"",
                "\t     .GroupObjects \"False\"",
                "\t     .Repetitions \"1\"",
                "\t     .MultipleSelection \"False\"",
                "\t     .TranslateCurve",
                "\tEnd With",
                "",
                "\t'  check if curve exists and assign a name",
                "\tOn Error GoTo Curve_Exists",
                "\t\tCurve.NewCurve \"2D-Analytical\"",
                "\tCurve_Exists:",
                "\tOn Error GoTo 0",
                "",
                "\tDim sCurveName As String",
                "",
                "sCurveName = \"profile_1\"",
                "",
                "\t'  define analytical curve",
                "\tWith AnalyticalCurve",
                "\t     .Reset",
                "\t     .Name sCurveName",
                "\t     .Curve \"2D-Analytical\"",
                "\t     .LawX \"t\"",
                "\t     .LawY \"t^2/(4*focus)\"",
                "\t     .LawZ \"0\"",
                "\t     .ParameterRange \"0\", \"D/2\"",
                "\t     .Create",
                "\tEnd With",
                "",
                "\tSelectTreeItem(\"Curves\\2D-Analytical\\\"+sCurveName)",
                "",
                "\t'  transform curve: rotate 2D-Analytical:spline_1",
                "\tWith Transform",
                "\t     .Reset",
                "\t     .Name \"2D-Analytical:\" + sCurveName",
                "\t     .Origin \"Free\"",
                "\t     .Center \"0\", \"0\", \"0\"",
                "\t     .Angle \"90\", \"0\", \"0\"",
                "\t     .MultipleObjects \"False\"",
                "\t     .GroupObjects \"False\"",
                "\t     .Repetitions \"1\"",
                "\t     .MultipleSelection \"False\"",
                "\t     .RotateCurve",
                "\tEnd With",
                "",
                "\t'  new component: antenna",
                "\tOn Error GoTo Component_exists",
                "\t\tComponent.New \"antenna\"",
                "\tComponent_exists:",
                "\tOn Error GoTo 0",
                "",
                "\t'  define sweepprofile: antenna:dish",
                "",
                "\tWith SweepCurve",
                "\t     .Reset",
                "\t     .Name \"reflector\"",
                "\t     .Component \"antenna\"",
                "\t     .Material \"PEC\"",
                "\t     .Twistangle \"0.0\"",
                "\t     .Taperangle \"0.0\"",
                "\t     .ProjectProfileToPathAdvanced \"False\"",
                "\t     .Path \"Dummy:circle_1\"",
                "\t     .Curve \"2D-Analytical:profile_1\"",
                "\t     .Create",
                "\tEnd With",
                "",
                "\tSelectTreeItem(\"Components\")",
                "",
                "\t'  delete curves",
                "",
                "\tCurve.DeleteCurve \"2D-Analytical\"",
                "\tCurve.DeleteCurve \"Dummy\"",
                "",
                "\t' add thickness if neccessary",
                "\tIf RestoreDoubleParameter(\"th_true\") Then",
                "\t\tPick.PickFaceFromId \"antenna:reflector\", \"1\"",
                "\t\tSolid.ThickenSheetAdvanced \"antenna:reflector\", \"Outside\", \"th_dish\", \"True\"",
                "",
                "\t\tPick.PickEndpointFromId \"antenna:reflector\", \"2\"",
                "\t\tPick.MovePoint \"-1\", \"0.0\", \"0.0\", \"focus\", \"False\"   'translate the picked points in the focus of the reflector",
                "\tElse",
                "\t\tPick.PickEndpointFromId \"antenna:reflector\", \"1\"",
                "\t\tPick.MovePoint \"-1\", \"0.0\", \"0.0\", \"focus\", \"False\"   'translate the picked points in the focus of the reflector",
                "\tEnd If",
                "",
                "\t' handle distortion info"
            ]
        }
    ]
}